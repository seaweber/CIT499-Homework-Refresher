{"version":3,"sources":["components/Item.js","components/List.js","components/ItemPage.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","useState","background","toggleBackground","urlString","id","style","backgroundColor","color","userSelect","padding","onClick","name","href","textDecoration","List","items","map","item","index","key","ItemPage","data","match","params","text","App","className","basename","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAoCeA,MAlCf,SAAgBC,GAAS,IAAD,EAEqBC,oBAAS,GAF9B,mBAEZC,EAFY,KAEAC,EAFA,KAIdC,EAAY,SAAWJ,EAAMK,GAEnC,OACI,yBACIC,MAAO,CACHC,gBAAiBL,EAAaF,EAAMQ,MAAQ,GAC5CC,WAAY,OACZC,QAAS,OAEbC,QAAU,kBAAMR,GAAmBD,KAEnC,gCAAOF,EAAMY,KAAb,KAEA,6BACI,uBACIC,KAAOT,EACPE,MAAO,CAAEE,MAAO,UACZD,gBAAiB,OACjBO,eAAgB,OAChBJ,QAAS,QALjB,cCCDK,MAlBf,SAAgBf,GAYZ,OATWA,EAAMgB,MAAMC,KAAK,SAAEC,EAAMC,GAC5B,OAAO,kBAAC,EAAD,CACCP,KAAMM,EAAKN,KACXJ,MAAOU,EAAKV,MACZH,GAAIc,EACJC,IAAKD,QCaVE,MAtBf,SAAoBrB,GAEhB,IAAMsB,EAAOtB,EAAMgB,MAAMhB,EAAMuB,MAAMC,OAAOnB,IAE5C,OACI,6BACI,gCAAOiB,EAAKV,KAAZ,KACA,+BAAMU,EAAKG,KAAX,KACA,wBAAInB,MAAO,CAAEC,gBAAiBe,EAAKd,QAAnC,IAA+Cc,EAAKd,MAApD,KACA,uBACIK,KAAK,IACLP,MAAO,CAAEE,MAAO,UACPD,gBAAiB,OACjBO,eAAgB,OAChBJ,QAAS,QALtB,Y,eCuBGgB,MAxBf,WAEI,IAAMV,EAAQ,CACV,CAAEJ,KAAM,UAAWJ,MAAO,QAASiB,KAAM,uDACzC,CAAEb,KAAM,iBAAkBJ,MAAO,SAAUiB,KAAM,6CACjD,CAAEb,KAAM,YAAaJ,MAAO,MAAOiB,KAAM,0BAG7C,OACI,yBAAKE,UAAU,OAEX,kBAAC,IAAD,CAAQC,SAAS,4BACb,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOC,KAAO,IAAMC,OAAK,EAACC,UAAW,SAAC/B,GAAD,OAAW,kBAAC,EAAD,iBAAUA,EAAV,CAAiBgB,MAAOA,QACxE,kBAAC,IAAD,CAAOa,KAAO,YAAcE,UAAW,SAAC/B,GAAD,OAAW,kBAAC,EAAD,iBAAcA,EAAd,CAAqBgB,MAAOA,YCb9EgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCZNa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b4c657fd.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction Item ( props ) {\n\n    const [ background, toggleBackground ] = useState(false);\n\n    const urlString = '/item/' + props.id;\n\n    return (\n        <div\n            style={{\n                backgroundColor: background ? props.color : '',\n                userSelect: 'none',\n                padding: '8px'\n            }}\n            onClick={ () => toggleBackground( !background ) }\n        >\n            <h1> { props.name } </h1>\n\n            <div>\n                <a\n                    href={ urlString }\n                    style={{ color: 'inherit',\n                        backgroundColor: 'gray',\n                        textDecoration: 'none',\n                        padding: '8px'\n                    }} >\n                    Details\n                </a>\n            </div>\n\n        </div>\n    );\n\n}\n\nexport default Item;\n","import React from 'react';\nimport Item from './Item';\n\nfunction List ( props ) {\n\n    const mapItems = () => {\n        return props.items.map( ( item, index) => {\n            return <Item\n                    name={item.name}\n                    color={item.color}\n                    id={index}\n                    key={index} />\n        });\n    };\n\n    return (\n        mapItems()\n    );\n\n}\n\nexport default List;\n","import React from 'react';\n\nfunction ItemPage ( props ) {\n\n    const data = props.items[props.match.params.id];\n\n    return (\n        <div>\n            <h1> { data.name } </h1>\n            <p> { data.text } </p>\n            <h3 style={{ backgroundColor: data.color }}> { data.color } </h3>\n            <a\n                href='/'\n                style={{ color: 'inherit',\n                         backgroundColor: 'gray',\n                         textDecoration: 'none',\n                         padding: '8px'\n                       }} >\n                Return\n            </a>\n        </div>\n    );\n}\n\nexport default ItemPage;\n","import React from 'react';\nimport './App.css';\nimport List from './components/List';\nimport ItemPage from './components/ItemPage'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from 'react-router-dom';\n\nfunction App() {\n\n    const items = [\n        { name: 'Trogdor', color: 'green', text: 'Was a man, or maybe a dragon man, or just a dragon?' },\n        { name: 'S is for sucks', color: 'orange', text: 'Sorry Mr. Trogdor, you\\'ve run out of luck' },\n        { name: 'Strongbad', color: 'red', text: 'THE CHEAT IS NOT DEAD'}\n    ];\n\n    return (\n        <div className=\"App\">\n\n            <Router basename=\"/seaweber/firebase_store\">\n                <Switch>\n\n                    <Route path={ \"/\" } exact component={(props) => <List {...props} items={items}/> }/>\n                    <Route path={ \"/item/:id\" } component={(props) => <ItemPage {...props} items={items}/> }/>\n\n                </Switch>\n            </Router>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}